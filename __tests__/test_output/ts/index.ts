/* Generated by SpeedAPI SUSC (https://github.com/speedapi/susc)
 * Project name: test
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the “Software”), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import * as speedapi from "@speedapi/driver";

const SayHiSpec = {
	name: "say_hi" as const,
	params: {
		required: {
			name: new speedapi.repr.Str({}),
		},
		optional: {
		}
	},
	returns: {
		required: {
			greeting: new speedapi.repr.Str({}),
		},
		optional: {
		}
	},
	confirmations: []
};
export class SayHi extends speedapi.Method<typeof SayHiSpec> {
	constructor() {
		super(SayHiSpec, 0, undefined);
	}
}
async function sayHi(
	this: any | speedapi.BoundSession,
	params: speedapi.repr.FieldValue<typeof SayHiSpec["params"]>,
	confirm?: speedapi.ConfCallback<SayHi>,
	session?: speedapi.Session
): Promise<speedapi.repr.FieldValue<typeof SayHiSpec["returns"]>> {
	const method = new SayHi();
	method.params = params;
	return await (session ?? this.$session).invokeMethod(method, confirm);
}



export function $specSpace(session: speedapi.Session) {
	return {
		specVersion: "2" as const,
		project: "test-38FN62ajSn" as const,
		globalMethods: {
			0: new SayHi(),
		},
		entities: {
		},
		confirmations: {
		},
	};
}



export function $bind(session: speedapi.Session) {
	if(session.specSpace.project !== "test-38FN62ajSn")
		throw new Error("failed to $bind: project identifier does not match")

	return {
		$session: session,
		$close: async () => await session.stop(),
		/*** METHODS ***/

		sayHi,

		/*** ENTITIES ***/


		/*** ENUMS AND BITFIELDS ***/

	};
}
